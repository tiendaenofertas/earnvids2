<?php
require_once __DIR__ . '/db_connect.php';

function generateEmbedCode($length = 10) {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $code = '';
    for ($i = 0; $i < $length; $i++) {
        $code .= $characters[rand(0, strlen($characters) - 1)];
    }
    return $code;
}

function formatFileSize($bytes) {
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];
    $i = 0;
    while ($bytes >= 1024 && $i < count($units) - 1) {
        $bytes /= 1024;
        $i++;
    }
    return round($bytes, 2) . ' ' . $units[$i];
}

function sanitize($input) {
    return htmlspecialchars(strip_tags(trim($input)), ENT_QUOTES, 'UTF-8');
}

function isAdmin() {
    return isset($_SESSION['role']) && $_SESSION['role'] === 'admin';
}

function isLoggedIn() {
    return isset($_SESSION['user_id']);
}

function requireLogin() {
    if (!isLoggedIn()) {
        header('Location: /login.php');
        exit;
    }
}

function requireAdmin() {
    requireLogin();
    if (!isAdmin()) {
        header('Location: /');
        exit;
    }
}

function getUserStats($userId) {
    $stmt = db()->prepare("
        SELECT 
            COUNT(*) as total_videos,
            COALESCE(SUM(file_size), 0) as total_storage,
            COALESCE(SUM(views), 0) as total_views,
            COALESCE(SUM(downloads), 0) as total_downloads
        FROM videos 
        WHERE user_id = ? AND status = 'active'
    ");
    $stmt->execute([$userId]);
    return $stmt->fetch();
}

function getGlobalStats() {
    $stats = [];
    
    $stmt = db()->query("SELECT COUNT(*) as total FROM users WHERE status = 'active'");
    $stats['total_users'] = $stmt->fetch()['total'];
    
    $stmt = db()->query("SELECT COUNT(*) as total FROM videos WHERE status = 'active'");
    $stats['total_videos'] = $stmt->fetch()['total'];
    
    $stmt = db()->query("SELECT COALESCE(SUM(file_size), 0) as total FROM videos WHERE status = 'active'");
    $stats['total_storage'] = $stmt->fetch()['total'];
    
    $stmt = db()->query("SELECT COALESCE(SUM(views), 0) as total FROM statistics WHERE date = CURDATE()");
    $stats['views_today'] = $stmt->fetch()['total'];
    
    return $stats;
}

function logActivity($action, $details = []) {
    $stmt = db()->prepare("
        INSERT INTO activity_logs (user_id, action, details, ip_address, user_agent)
        VALUES (?, ?, ?, ?, ?)
    ");
    
    $userId = $_SESSION['user_id'] ?? null;
    $ip = $_SERVER['REMOTE_ADDR'] ?? null;
    $userAgent = $_SERVER['HTTP_USER_AGENT'] ?? null;
    
    $stmt->execute([
        $userId,
        $action,
        json_encode($details),
        $ip,
        $userAgent
    ]);
}

function incrementViews($videoId) {
    $stmt = db()->prepare("UPDATE videos SET views = views + 1 WHERE id = ?");
    $stmt->execute([$videoId]);
    
    $stmt = db()->prepare("
        INSERT INTO statistics (video_id, date, views)
        VALUES (?, CURDATE(), 1)
        ON DUPLICATE KEY UPDATE views = views + 1
    ");
    $stmt->execute([$videoId]);
}

function getActiveStorage() {
    $stmt = db()->query("SELECT * FROM storage_config WHERE is_active = 1 LIMIT 1");
    return $stmt->fetch();
}

function isValidVideoExtension($filename) {
    $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
    return in_array($ext, ALLOWED_EXTENSIONS);
}

function getVideoUrl($video) {
    $storage = getActiveStorage();
    
    if (!$storage) {
        return '#';
    }
    
    switch ($storage['storage_type']) {
        case 'contabo':
            // Para Contabo S3
            $url = $storage['endpoint'] . '/' . $storage['bucket'] . '/' . $video['storage_path'];
            // Asegurarse de que la URL sea correcta
            if (strpos($url, '//') === false) {
                $url = 'https://' . $url;
            }
            return $url;
            
        case 'local':
            // Para almacenamiento local
            return SITE_URL . '/stream.php?v=' . $video['embed_code'];
            
        default:
            return '#';
    }
}
}

function formatDuration($seconds) {
    $h = floor($seconds / 3600);
    $m = floor(($seconds % 3600) / 60);
    $s = floor($seconds % 60);
    
    if ($h > 0) {
        return sprintf('%d:%02d:%02d', $h, $m, $s);
    }
    return sprintf('%d:%02d', $m, $s);
}